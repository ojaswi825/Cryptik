How to test this Hash function:

1. On struct Crypt add a new property of frequency.
2. Download an english dictionary of words.
3. Take words one by one and hash them, if hash collides then increase the frequency.
4. Output frequency.txt resulting performance. 

Disadvantage of the program:

password created can be matched only in one session.

Applications: applicable in always running scenario.

How will server authenticate?

1. db server will have the email-id and hashed value.
2. db will get the hashed value corresponding to the email and match with the password entered.


algorithm:

std::string getHash(std::string compositeString) {
            //generates a hashed string based on a hash function (to be implemented).

            unsigned long int sum = 0;
            std::string hashedString = "";

            for (unsigned long int i=0; i<compositeString.length()-1; i++) {
                
                int x = (int)compositeString[i] ^ (int)(compositeString[i+1]);
                int hf =  ((int)compositeString[i] + x) % 23;

                hashedString += std::to_string(hf);
            }

            return hashedString;
        }


how to link library:

g++ -c Cryptik.cpp
ar rs libCryptik.a Cryptik.o
g++ demo demo.o libCryptik.a


